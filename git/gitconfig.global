[color]
	diff = auto
	branch = auto
	status = auto
[format]
	pretty=%h %C(yellow)%an%Creset (%ad)%n %n%b %s%n%n
[alias]
	mergelogmsg = "!f() { var=$(git symbolic-ref --short HEAD) && printf 'Merge branch %s into %s\n\n::SUMMARY::\nBranch %s commits:\n' $1 $var $1 > temp_merge_msg && git log --format=format:'%s' $var..$1 >> temp_merge_msg && printf '\n\nBranch %s commits:\n' $var >> temp_merge_msg && git log --format=format:'%s' $1..$var >> temp_merge_msg && printf '\n\n* * * * * * * * * * * * * * * * * * * * * * * * *\n::DETAILS::\n' >> temp_merge_msg && git log --left-right $var...$1 >> temp_merge_msg && git merge --no-ff --no-commit $1 && git commit -eF temp_merge_msg; rm -f temp_merge_msg;}; f"
	m = merge --no-ff
	b = branch
	co = checkout
	ci = commit -a
	s = status
	w = whatchanged -p
	l = log --pretty=format:'%C(yellow)%an%Creset (%ae)%n%w(,2)commit %h %ad%n %n%w(,1)%s %b%n' --date=relative --stat
	l1 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
	l2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all

[i18n]
	commitEncoding = utf8
	logOutputEncoding = utf8

[core]
	editor = vim
  whitespace = cr-at-eol
  autocrlf = false

[merge]
	ff = only
	log = 20

[push]
	default = simple

